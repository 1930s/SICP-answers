练习 1.9
============

以下是第一个 ``+`` 函数的定义：

::

    (define (+ a b)
        (if (= a 0)
            b
            (inc (+ (dec a) b))))

如果执行 ``(+ 3 5)`` 的话，这个表达式的计算过程为：

::
    
    (+ 3 5)
    (inc (+ 2 5))                   ; (inc (+ (dec 3) 5))
    (inc (inc (+ 1 5)))             ; (inc (inc (+ (dec 2) 5)))
    (inc (inc (inc (+ 0 5))))       ; (inc (inc (inc (+ (dec 1) 5))))
    (inc (inc (inc 5)))
    (inc (inc 6))
    (inc 7)
    8

从计算过程中可以很明显地看到伸展和收缩两个阶段，且伸展阶段所需的额外存储量和计算所需的步数都正比于参数 ``a`` ，说明这是一个线性递归计算过程。

另一个 ``+`` 函数的定义如下：

::

    (define (+ a b)
        (if (= a 0)
            b
            (+ (dec a) (inc b))))

执行 ``(+ 3 5)`` ，表达式的展开过程如下：

::

    (+ 3 5)
    (+ 2 6)     ; (+ (dec 3) (inc 5))
    (+ 1 7)     ; (+ (dec 2) (inc 6))
    (+ 0 8)     ; (+ (dec 1) (inc 7))
    8

从计算过程中可以看到，这个版本的 ``+`` 函数只使用常量存储大小，且计算所需的步骤正比于参数 ``a`` ，说明这是一个线性迭代计算过程。

我们还可以配合 ``trace`` 函数，通过在解释器里面追踪两个 ``+`` 函数的不同定义来考察它们所使用的计算模式：

.. literalinclude:: code/9-plus.scm

因为避免和内置的 ``+`` 函数重名，示例代码中将两个版本的 ``+`` 函数分别改名为 ``plus-1`` 和 ``plus-2`` 。

首先来追踪 ``plus-1`` 函数：

::

    1 ]=> (trace plus-1)

    ;Unspecified return value

    1 ]=> (plus-1 3 5)

    [Entering #[compound-procedure 11 plus-1]
        Args: 3
              5]
    [Entering #[compound-procedure 11 plus-1]
        Args: 2
              5]
    [Entering #[compound-procedure 11 plus-1]
        Args: 1
              5]
    [Entering #[compound-procedure 11 plus-1]
        Args: 0
              5]
    [5
        <== #[compound-procedure 11 plus-1]
        Args: 0
              5]
    [6
        <== #[compound-procedure 11 plus-1]
        Args: 1
              5]
    [7
        <== #[compound-procedure 11 plus-1]
        Args: 2
              5]
    [8
        <== #[compound-procedure 11 plus-1]
        Args: 3
              5]
    ;Value: 8

可以看到 ``plus-1`` 的参数 ``b`` 在伸展和收缩阶段都一直是 ``5`` ，最后的结果是根据 ``inc`` 函数递归计算而来的。

然后来看看 ``plus-2`` ：

::

    1 ]=> (trace plus-2)

    ;Unspecified return value

    1 ]=> (plus-2 3 5)

    [Entering #[compound-procedure 12 plus-2]
        Args: 3
              5]
    [Entering #[compound-procedure 12 plus-2]
        Args: 2
              6]
    [Entering #[compound-procedure 12 plus-2]
        Args: 1
              7]
    [Entering #[compound-procedure 12 plus-2]
        Args: 0
              8]
    [8
        <== #[compound-procedure 12 plus-2]
        Args: 0
              8]
    [8
        <== #[compound-procedure 12 plus-2]
        Args: 1
              7]
    [8
        <== #[compound-procedure 12 plus-2]
        Args: 2
              6]
    [8
        <== #[compound-procedure 12 plus-2]
        Args: 3
              5]
    ;Value: 8

从 ``trace`` 的结果可以看出， ``plus-2`` 的计算过程没有伸展和收缩阶段，它通过不断更新 ``a`` 和 ``b`` 两个参数的值来完成计算。
