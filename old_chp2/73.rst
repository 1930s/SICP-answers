练习 2.73
===============

要完成练习，需要先实现书本 123 页给出的 ``put`` 和 ``get`` 函数，以下是一个二维哈希表的实现：

.. literalinclude:: code/p123-put-and-get.scm

.. seealso:: 哈希表的相关 API 可以查看手册： `http://www.gnu.org/software/mit-scheme/documentation/mit-scheme-ref/Hash-Tables.html#Hash-Tables <http://www.gnu.org/software/mit-scheme/documentation/mit-scheme-ref/Hash-Tables.html#Hash-Tables>`_

a)
-----

无法对 ``number?`` 和 ``same-variable?`` 函数使用数据导向处理方式的原因是，在求导程序中，我们将数字直接表示为 Scheme 的数值类型，而将变量直接表示为 Scheme 的符号类型（查看书本 100 页）。

如果想要对数字和符号添加数据导向处理功能，我们需要为以上两种类型的值添加标识，比如将数字 ``10`` 表示为：

::

    (list 'number 10)

将变量 ``x`` 表示为：

::

    (list 'variable 'x)

然后，再为这两种类型添加相应的函数包，这样就可以在 ``deriv`` 函数中采用数据导向方式添加 ``number?`` 和 ``same-variable?`` 函数了。


b)
--------

以下是数据导向版本的加法求导程序，主要修改是因为在求导的过程中已经用 ``operator`` 取出了前缀的 ``'+`` 符号，所以 ``addend`` 和 ``aguend`` 可以少用一次 ``cdr`` ，其他的和书本 100-101 页的程序类似：

.. literalinclude:: code/73-install-sum-pack.scm

测试：

::

    1 ]=> (load "p123-put-and-get.scm")

    ;Loading "p123-put-and-get.scm"... done
    ;Value: get

    1 ]=> (load "73-deriv.scm")

    ;Loading "73-deriv.scm"... done
    ;Value: variable?

    1 ]=> (load "73-install-sum-pack.scm")

    ;Loading "73-install-sum-pack.scm"... done
    ;Value: install-sum-pack

    1 ]=> (install-sum-pack)

    ;Value: done

    1 ]=> (deriv '(+ x 3) 'x)

    ;Value 11: (+ 1 0)


以下是数据导向版本的乘法求导程序，修改方式和前面的加法求导程序类似：

.. literalinclude:: code/73-install-product-pack.scm

测试：

::

    1 ]=> (load "p123-put-and-get.scm")

    ;Loading "p123-put-and-get.scm"... done
    ;Value: get

    1 ]=> (load "73-deriv.scm")

    ;Loading "73-deriv.scm"... done
    ;Value: variable?

    1 ]=> (load "73-install-sum-pack.scm")

    ;Loading "73-install-sum-pack.scm"... done
    ;Value: install-sum-pack

    1 ]=> (load "73-install-product-pack.scm")

    ;Loading "73-install-product-pack.scm"... done
    ;Value: make-sum

    1 ]=> (install-sum-pack)        ; 因为乘法求导需要使用 make-sum

    ;Value: done

    1 ]=> (install-product-pack)

    ;Value: done

    1 ]=> (deriv '(* x y) 'x)

    ;Value 11: (+ (* x 0) (* 1 y))



c)
----------


d)
------

包里面的主体程序无须变动，但是所有 ``put`` 调用的参数必须互换。

比如原本的：

::

    (put 'make-sum '+ make-sum)

现在要改成：

::

    (put '+ 'make-sum make-sum)

但是 ``make-sum`` 程序本身不必修改。
