练习 2.65
===============

.. warning:: 为了避免和前面的程序冲突，本题的 ``intersection-set`` 被改名为 ``intersection-tree`` ， ``union-set`` 被改名成 ``union-tree``  。

使用树实现的 :math:`\Theta(n)` 复杂度的 ``intersection-tree`` 和 ``union-tree`` 的步骤如下：

1. 使用 :doc:`63` 的 ``tree->list-2`` 程序，将进行操作的两棵树从树转为列表，复杂度为 :math:`\Theta(n)` 。

2. 使用书本 105 页的 ``intersection-set`` 操作对两个列表进行交集操作；或者，使用 :doc:`62` 的 ``union-set`` 对两个列表进行并集操作；这两个操作的复杂度都是 :math:`\Theta(n)` 。

3. 使用 :doc:`64` 的 ``list->tree`` 程序，将第二步操作的结果表转回成树，复杂度为 :math:`\Theta(n)` 。

我们使用了三个复杂度为 :math:`\Theta(n)` ，但总的复杂度还是 :math:`\Theta(n)` ，因此符合题目的要求。


intersection-tree
----------------------

定义：

.. literalinclude:: code/65-intersection-tree.scm

测试：

::

    1 ]=> (load "65-intersection-tree.scm")

    ;Loading "65-intersection-tree.scm"...
    ;  Loading "63-tree-list-2.scm"...
    ;    Loading "p106-tree.scm"... done
    ;  ... done
    ;  Loading "64-list-tree.scm"...
    ;    Loading "p106-tree.scm"... done
    ;  ... done
    ;  Loading "p105-intersection-set.scm"... done
    ;... done
    ;Value: intersection-tree

    1 ]=> (intersection-tree (list->tree '(1 2 3 4 5)) (list->tree '(1 3 5 7 9)))

    ;Value 11: (3 (1 () ()) (5 () ()))


union-tree
-------------

定义：

.. literalinclude:: code/65-union-tree.scm

测试：

::

    1 ]=> (load "65-union-tree.scm")

    ;Loading "65-union-tree.scm"...
    ;  Loading "63-tree-list-2.scm"...
    ;    Loading "p106-tree.scm"... done
    ;  ... done
    ;  Loading "64-list-tree.scm"...
    ;    Loading "p106-tree.scm"... done
    ;  ... done
    ;  Loading "62-union-set.scm"... done
    ;... done
    ;Value: union-tree

    1 ]=> (union-tree (list->tree '(1 2 3 4 5)) (list->tree '(1 3 5 7 9)))

    ;Value 11: (4 (2 (1 () ()) (3 () ())) (7 (5 () ()) (9 () ())))

