练习 2.59
==============

以下是 ``union-set`` 函数的定义：

.. literalinclude:: code/59-union-set.scm

``union-set`` 将给定的两个表用 ``append`` 组合成一个新的输入表，然后调用内部函数 ``iter`` ， ``iter`` 维持输入表(``set``)和一个结果表(``result``)，它每次从输入表中取出一个元素，用 ``element-of-set?`` 检查这个元素是否已经存在于结果表，如果不存在，就用 ``cons`` 把这个元素加入结果表，否则就检查输入表的下一个元素，一直到输入表成为空表为止。

在返回结果表之前进行了一个 ``reverse`` 调用，因为 ``iter`` 处理的结果表本身是逆序的。

因为每次查找一个元素都需要使用 :math:`\Theta(N)` 复杂度的 ``element-of-set?`` ，所以这个 ``union-set`` 的复杂度为 :math:`\Theta(N^2)` 。

测试
-------

::

    1 ]=> (load "59-union-set.scm")

    ;Loading "59-union-set.scm"...
    ;  Loading "p103-element-of-set.scm"... done
    ;... done
    ;Value: union-set

    1 ]=> (union-set '() (list 1 2 3))

    ;Value 12: (1 2 3)

    1 ]=> (union-set (list 1 2 3 4 5) (list 1 3 5 7 9))

    ;Value 11: (1 2 3 4 5 7 9)
