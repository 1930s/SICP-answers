练习 2.33
=================

这题的解法可以通过将各个函数原本的定义，和使用 ``accumulate`` 的定义对比得出。


map
-------

``map`` 原本的定义为：

.. literalinclude:: code/p70-map.scm

而题目给出的 ``accumulate`` 定义的 ``map`` 的定义为：

::
    
    (define (map p sequence)
        (accumulate (lambda (x y) <??>) '() sequence))

通过展开 ``(accumulate (lambda (x y) <??>) '() sequence)`` 调用，可以得出以下表达式：

::

        (if (null? sequence)
            '()
            ((lambda (x y) <??>) (car sequence)
                                 (accumulate (lambda (x y) <??>) '() sequence)))

通过将这个展开式和原本 ``map`` 的定义对比可以看出，我们只要让 ``(lambda (x y) <??>)`` 中的 ``<??>`` 的作用等同于 ``(cons (p x) y)`` 即可，因此，这个答案的解为 ``(lambda (x y) (cons (p x) y))`` 。

以下是完整的 ``map`` 定义：

.. literalinclude:: code/33-map.scm

测试：

::

    1 ]=> (map square (list 1 2 3 4))

    ;Value 11: (1 4 9 16)

    1 ]=> (map odd? (list 1 2 3 4))

    ;Value 12: (#t #f #t #f)


append
--------------

.. literalinclude:: code/33-append.scm

测试：

::

    1 ]=> (append (list 1 2 3) (list 4 5 6))

    ;Value 13: (1 2 3 4 5 6)


length
----------------

.. literalinclude:: code/33-length.scm

测试：

::

    1 ]=> (length '())

    ;Value: 0

    1 ]=> (length (list 1 2 3))  

    ;Value: 3

